## Introduction

To create a food web in R, we will be using the foodweb package. 

The package requires a binary matrix where:

  1. row n species is equal to column n species
  
  2. 0 is equal to no interaction
  
  3. 1 is equal to column eats row
  
  4. Converted to text file with commas as separaters


## Importing the dataset

```{r}
# Load in necessary packages
library(readr)
library(dplyr)
library(foodweb)
library(ggplot2)
# Load in dataset
aquamarine <- read_delim("aquamarine.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
View(aquamarine)
```

## Creating the matrix

#### Getting a list of species

Step 1: Create a function of a list of species given the data, location, and trophic level (will be used later to fill the matrix)

```{r}
# Function extract predators or prey given a location
get_trophic <- function(data, location, trophic){
  
  data_trophic <- data %>% 
    
  # Filter out by location
    filter(`Geographic location` == location)
    
  # Filter out by trophic level  
  if(trophic == "Prey"){
    data_trophic <- data_trophic %>% 
      dplyr::select(Prey) %>% 
      unique 
    
    prey <- as.vector(data_trophic$Prey)
    return(prey)
  }
  
  if(trophic == "Predator"){
    data_trophic <- data_trophic %>% 
      dplyr::select(Predator) %>% 
      unique 
    
    pred <- as.vector(data_trophic$Predator)
    return(pred)
  }
}
# Test to see if it works
get_trophic(aquamarine, "Antarctic Peninsula", "Predator")
```

Step 2: Create a function that returns a list of all species at a given location (will be used later to fill the matrix)

```{r}
# Get all species from a location
get_species <- function(data, location) {
  # List of predators
  pred <- get_trophic(data, location, "Predator")
  
  # List of prey
  prey <- get_trophic(data, location, "Prey")
  
  # Combine the two
  species <- union(pred, prey)
  return(species)
}
# Test
get_species(aquamarine, "Antarctic Peninsula")
```


#### Getting a list of prey for each predator

Step 3: Get a list of items a predator eats, given a location and predator (will be used later to fill the  matrix)

```{r}
# Get prey items of a predator
get_prey <- function(data, location, predator){
  
  # Filter for location and given predator
  prey_data <- data %>% 
    filter(`Geographic location` == location) %>% 
    dplyr::select(Predator, Prey) %>% 
    dplyr::filter(Predator == predator) %>% 
    unique
  
  # Return the names of all the prey it eats
  prey <- as.vector(prey_data$Prey)
  return(prey)
}
# Test
get_prey(aquamarine, "Antarctic Peninsula", "Nototheniops larseni")
```

#### Creating the empty matrix

Step 4: Create an empty matrix that contains n rows and n columns, where n is the number of species present in a given location

```{r}
# Create empty matrix for a location
make_matrix <- function(data, location){
  # Get all the species of location using function created in step 2
  sp <- get_species(data, location)
  
  # Create matrix where n column represents the same species as n row
  m <- matrix(0L, nrow = length(sp), ncol = length(sp))
  rownames(m) <- sp
  colnames(m) <- sp
  return(m)
}
```

#### Filling in the matrix

Step 5: Fill the matrix with values corresponding to predation events in a given location

```{r}
fill_matrix <- function(data, location){
  
  # Create matrix using function from step 4
  m <- make_matrix(data, location)
  
  # Get list of predators using function from step 1
  predators <- get_trophic(data, location, "Predator")
  
  # For each predator 
  for(pred in predators){
    
    # Get its prey species using function from step 3
    prey_species <- get_prey(aquamarine, location, pred)
    
    # Assign each value of matrix[prey, predator] = 1
    for(prey in prey_species){
      m[prey, pred] = 1
    }
  }
  return(m)
}
# Test
fill_matrix(aquamarine, "Antarctic Peninsula")
```

## Creating the food web and analysing diversity

Below is exploratory code from trying to figure out how to analyze each matrix specifically. This is automated further down in the file

```{r}
# The matrix file
mat <- fill_matrix(aquamarine, "Antarctic Peninsula")
# Converting to txt file
write.table(mat, file="mymatrix.txt", row.names=FALSE, col.names=FALSE, sep = ",") # saved in directory
# Analyse interactions
analyse.single(filename="mymatrix.txt")
# Reading results of analyse signal
results <- read_csv("Results-mymatrix.txt")
# Plot web
plotweb(col=c("red", "green", "blue"), radii=c(5,5, 5))
    # will need to change col and radii for number of interactions (see results)
```

## Function to get interactions for each site

Step 7: Create a function that returns a dataframe with number of links (L), connectance (C), and species richness (SR) for a given location

```{r}
interactions <- function(data, location) {
  # Function returns total number of interactions in a foodweb
  
  # Create matrix
  mat <- fill_matrix(data, location)
  
  # Write as text file
  write.table(mat, file="mymatrix.txt", row.names=FALSE, col.names=FALSE, sep = ",")
  
  # Analyze text matrix
  analyse.single(filename="mymatrix.txt")
  
  # Open results
  results <- read_csv("Results-mymatrix.txt", col_types = cols())
  L <- results$`Total # Links`
  SR <- results$`Species richness`
  C <- results$Connectance
  
  df <- data.frame(location, L, SR, C)
  # Return total number of links
  return(df)
  
}
```

## Get the interactions for each site

Step 8: Create a dataframe with the food web complexity metrics for each location

```{r}
sites <- as.vector(unique(aquamarine$`Geographic location`)) # vector for all the sites
inter <- data.frame() # data frame to hold interactions
for(s in sites){
  
  # Calculate number of interactions
  temp_interaction <- interactions(aquamarine, s)
  
  # Save to vector
  inter <- rbind(inter, temp_interaction) 
  
}
# Data set of all the interactions
inter
```

## Testing for Normality in the dataset

Step 9: Test for normality to be able to run linear models

```{r}
# Connectance
shapiro.test(inter$C)
# Links
shapiro.test(inter$L)
# Species Richness
shapiro.test(inter$SR)
```

All of these results were significant, therefore none of them exhibit normality. This is likely due to the dataset having only 25 points for each

# Plots

```{r}
# Link-scaling species law assumption 1
  # SR is inversely proportional to connectance
  
ggplot(aes(x = SR, y = 1/C), data = inter) +
  geom_point() +
  theme_classic() +
  geom_smooth(method = "lm")
  
 # Linear model to test it
 
 summary(lm(1/C ~ SR, data = inter)) # significant; although does not follow normality assumption
 
 # Link scaling law versus constant connectance
 
    # 2 predator-prey interactions (L) per SR versus increasing predator-prey interactions per SR
    
 ggplot(aes(x = SR, y = L), data = inter) +
  geom_point(size = 2) +
  geom_smooth(method = "lm") +
  theme_classic() +
  geom_hline(yintercept=20, linetype="dashed", color = "orange", alpha = 0.5, size = 1) +
  geom_vline(xintercept=10, linetype="dashed", color = "orange", alpha = 0.5, size = 1) +
  geom_hline(yintercept=40, linetype="dashed", color = "red", alpha = 0.5, size = 1) +
  geom_vline(xintercept=20, linetype="dashed", color = "red", alpha = 0.5, size = 1) +
  geom_hline(yintercept=80, linetype="dashed", color = "darkgreen", alpha = 0.5, size = 1) +
  geom_vline(xintercept=40, linetype="dashed", color = "darkgreen", alpha = 0.5, size = 1)
  
  # Linear model
  
  summary(lm(L~SR, data = inter)) # significant; although does not follow normality assumption
  
      # Estimate = 2.6 ~ link scaling species law
  ```
  
 # Does food web complexity decrease with increasing latitude
  
 ```{r}
 # Use dataset with transformed Latitude from Gloria
 aqua_lat <- aquamarine_lat %>% 
 select(`Geographic location`, Latitude) %>% 
 group_by(`Geographic location`, Latitude) %>% 
 tally()
 aqua_lat <- aqua_lat[-c(3),]
 aqua_lat <- aqua_lat[-c(21),]
 df <- data.frame(inter, aqua_lat$Latitude)
  
 # Latitude versus connectance
 ggplot(aes(x = aqua_lat.Latitude, y = C), data = df) +
 geom_point(size = 3) +
 theme_classic() +
 labs(x = "Latitude")
  
 # Linear model
 
 summary(lm(C~aqua_lat.Latitude, data = df)) # no significant relationship
    
 # Latitude versus species richness ~ test well-known SR distribution of higher SR at lower latitudes
 ggplot(aes(x = aqua_lat$Latitude, y = SR), data = df) +
 geom_point(colour = "black", size = 3) +
 theme_classic() +
 labs(x = "Latitude")
   
 # Linear model
 
 summary(lm(SR~aqua_lat.Latitude, data = df)) # not significant
      
 # Links & SR versus Latitude
 ggplot(aes(x = aqua_lat$Latitude, y = SR), data = df) +
 geom_point(colour = "black", alpha = 0.5, size = 3) +
 geom_point(aes(y = L), colour = "red", alpha = 0.5, size = 3) +
 theme_classic() +
 labs(x = "Latitude")
  ```
